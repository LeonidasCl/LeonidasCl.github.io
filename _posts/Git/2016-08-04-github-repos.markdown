---
layout: post
title:  "本地与远程库与分支的几个概念"
date:   2016-08-04 21:04:17
categories: Git
comments: true
---

git用起来倒是很方便，但基础不牢的话用着用着就会出问题的。各方面都了解一点，还不足以拼凑起来形成能力。时间一长就会积累各种问题，克隆下来的分支怎么推不上去了啊，github上建的分支怎么本地看不到啊，远程分支怎么删除不了啊，乱七八糟的。

首先来明确本地仓库和远程仓库的概念。我们都知道git其实是分布式的版本控制系统，分布式的嘛，哪个是远程哪个是本地是相对而言的。你如果从我的仓库里clone了代码，我的仓库对你而言就是远程库，但是我有时候也要克隆他人的代码来学习一个，那我的仓库对他人来说又是个本地库。仓库（主机）就这一个，你说是远程库还是本地库？所以说这两个概念不是绝对的，有的时候要变通一下子。

在仓库里进到某套代码的主分支去，新建分支，在新分支上开发，切回主分支，把项目进展从新分支合并进主分支...这些流程初学者也应该很熟练了。这篇文章主要想讲清楚远程分支和本地分支的一些东西。文章清晰可读是不够的，要清晰且可实践，所以还是得举个例子。

首先我在github上新建一个仓库learnrepo，现在这个仓库是空的：

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/01.jpg)

图片里已经说到了，我们可以直接克隆到本地，一行代码就搞定，但是为了提高大家的姿势水平这次用一种矫情的方式去给这个远程库添加文件。首先我再本地随意建了一个文件夹，创建了一个txt，随意写了点东西：

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/02.jpg)

这样，在打开`git bash`并切换到这个文件夹下，将其初始化为git控制下的目录，就是要用git init

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/03.jpg)

可以看到，.git文件夹已经出现了。现在这个目录正处于版本控制系统下了，注意目录名我换了一下变成repolearn，目录名并不一定要和远程库里面的一样。然后git add并commit，将刚才新建的文件加入git并提交，这里省略了。那么我现在就要把这个文件夹和远程库关联起来，这样我才能push得上去。先用remote add命令可以添加远程库。

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/04.jpg)

直接就添加好了。现在就把新的文件推上去。再次注意，git仓库建立的时候实际上已经有了自动建立的master分支，我们只要在首次push时把本地自动建立的master分支和远程的自动建立的master分支关联起来，这个关联用-u参数实现，以后再push就不用加-u了，因为关联已建立。

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/05.jpg)

看上图，set up to track就是建立了关联。这里顺带说一下push的格式是`git push <远程主机名> <源分支地址>:<目的分支地址>`，如果源分支与目的分支已经关联可省略冒号及冒号后的部分（例如`git push origin master`），如果源分支就是当前分支可省略源分支地址部分(例如`git push origin`)，如果远程主机只有一个，那么连远程主机名都可以省略（直接`git push`）

现在github上就有了这个新文件。

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/06.jpg)

现在就来搞分支操作了，首先我在github的仓库主页面上，新建了一个分支名叫develop的：

![图片](http://obdvl7z18.bkt.clouddn.com/gh-pages/img/20160805/07.jpg)

现在在本地是**看不到**这个新建的分支的，不管你是git branch -a看所有还是-r看远程